<#
    .Synopsis        
        Script to migrate an OnPrem term store to SharePoint Online
        This Script Assumes you've installed SharePoint in the default location
        This Script currently does not support multilingual termstores
        This Script currently does not support user mapping to SPO user
        This Script currently only supports a single TermStore associated with the OnPrem/Source web application and it must be the default TermStore

        .Example:
        	.\MigrateOnPremTermStoreToSPO.ps1 -SrcSiteUrl https://www.contoso.com -SrcUsername contoso\admin -SrcPassword P@ssword -SPOSiteUrl https://contoso.sharepoint.com -SPOUsername admin@Contoso.onmicrosoft.com -SPOPassword P@ssword
	
	.Notes
        	Name: MigrateOnPremTermStoreToSPO.ps1
        	Sources: 
        	Author: Brent Person, Microsoft, brpers@microsoft.com
        	Last Edit: 07/10/2020
#>

[CmdletBinding()]
    Param
    (
        [Parameter(Mandatory=$true)][string]$SrcSiteUrl, 
        [Parameter(Mandatory=$true)][string]$SrcUsername,
        [Parameter(Mandatory=$true)][string]$SrcPassword,
        [Parameter(Mandatory=$true)][string]$SPOSiteUrl,
        [Parameter(Mandatory=$true)][string]$SPOUsername,
        [Parameter(Mandatory=$true)][string]$SPOPassword
    )

# Add references to SharePoint client assemblies - required for CSOM
# Change if your installation directory is not default
Add-Type -Path "C:\Program Files\Common Files\Microsoft Shared\Web Server Extensions\16\ISAPI\Microsoft.SharePoint.Client.dll"
Add-Type -Path "C:\Program Files\Common Files\Microsoft Shared\Web Server Extensions\16\ISAPI\Microsoft.SharePoint.Client.Runtime.dll"
Add-Type -Path "C:\Program Files\Common Files\Microsoft Shared\Web Server Extensions\16\ISAPI\Microsoft.SharePoint.Client.Taxonomy.dll"


#This code calls to a Microsoft web endpoint to track how often it is used. 
#No data is sent on this call other than the application identifier
Add-Type -AssemblyName System.Net.Http
$client = New-Object -TypeName System.Net.Http.Httpclient
$cont = New-Object -TypeName System.Net.Http.StringContent("", [system.text.encoding]::UTF8, "application/json")
$tsk = $client.PostAsync("https://msapptracker.azurewebsites.net/api/Hits/a5cbcde0-9c3d-49e1-af19-74da4353f809",$cont)

#region functions
function WalkSourceTerm
{
    [CmdletBinding()]
    Param
    (
        [Parameter(Mandatory=$true)][Microsoft.SharePoint.Client.Taxonomy.Term]$term, #srcTerm
        [Parameter(Mandatory=$true)][Microsoft.SharePoint.Client.Taxonomy.TermSet]$termset, #DestTermSet
        [Parameter(Mandatory=$true)][Microsoft.SharePoint.Client.Taxonomy.TermGroup]$termgroup #DestTermGroup
    )
    #Start-Sleep -Seconds 2
    
    Load-CSOMObject -context $Srcctx -object ([REF]$term.Terms) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$true

    [Microsoft.SharePoint.Client.Taxonomy.Term]$destSrcTerm = GetTerm -term $term -termset $termset
    if($term.Terms.Count -gt 0)
    {
        foreach($dst in $term.Terms)
        {
            Write-Host "Walking term: '$($dst.Name)' Child Terms" -ForegroundColor Yellow
            WalkSourceTerm -term $dst -termset $termset -termgroup $termgroup
        }    
    }
    else
    {
        return
    }
}

function GetTerm
{
    [CmdletBinding()]
    Param
    (
        [Parameter(Mandatory=$true)][Microsoft.SharePoint.Client.Taxonomy.Term]$term, #srcTerm
        [Parameter(Mandatory=$true)][Microsoft.SharePoint.Client.Taxonomy.TermSet]$termset #DestTermSet
    )
    Start-Sleep -Seconds 2
    Load-CSOMObject -context $Destctx -object ([REF]$termset.Group) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false

    [boolean]$syncterm = $false

    Write-Host "Getting all destination TermSet Terms for TermSet: '$($termset.Name)'" -ForegroundColor Yellow
    # Get all destintation termset terms
    [Microsoft.SharePoint.Client.Taxonomy.TermCollection]$trms = $termset.GetAllTerms() 
    Load-CSOMObject -context $Destctx -object ([REF]$trms) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$true

    # First Check to see if the Destination TermSet has any terms
    Write-Host "Checking to see if Destination TermSet: '$($termset.Name)' has any existing terms" -ForegroundColor Yellow
    Write-Host "Destination TermSet: '$($termset.Name)' has '$($trms.Count)' terms" -ForegroundColor Yellow
    Write-Host "Checking to see if term: '$($term.Name)' exists in destination Termset: '$($termset.Name)'" -ForegroundColor Yellow
    if(($trms.Count -gt 0) -and ($trms | ?{$_.Id -eq $term.Id.ToString()}))
    {
        [Microsoft.SharePoint.Client.Taxonomy.Term]$t = $trms | ?{$_.Id -eq $term.Id.ToString()}
        Load-CSOMObject -context $Destctx -object ([REF]$t) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$true
        Write-Host "Term: '$($t.Name)' already exists in TermSet: '$($termset.Name)'" -ForegroundColor Yellow
    }
    else
    {
        # Create Term in DestTermGroup/DestTermSet
        Write-Host "Term: '$($term.Name)' does not exist in TermSet: '$($termset.Name)'" -ForegroundColor Yellow
        Write-Host "Attempting to creating Term: '$($term.Name):$($term.Id)' in Destination TermSet: '$($termset.Name)'" -ForegroundColor Yellow
        [Microsoft.SharePoint.Client.Taxonomy.Term]$t = CreateTerm -term $term -termset $termset -termgroup $termset.Group
        $syncterm = $true
    }

    if(($syncterm) -and (![string]::IsNullOrEmpty($t.Name)))
    {
        Write-Host "Syncing Destination Term: '$($t.Name)' with Source Term '$($term.Name)'" -ForegroundColor Yellow
        SyncTermInfo -destTerm $t -srcTerm $term
        
    }
    return $t
}

function CreateTerm
{
    [CmdletBinding()]
    Param
    (
        [Parameter(Mandatory=$true)][Microsoft.SharePoint.Client.Taxonomy.Term]$term, #SrcTerm
        [Parameter(Mandatory=$false)][Microsoft.SharePoint.Client.Taxonomy.TermSet]$termset, #DestTermSet
        [Parameter(Mandatory=$false)][Microsoft.SharePoint.Client.Taxonomy.TermGroup]$termgroup #DestTermGroup
    )

    Start-Sleep -Seconds 2

    Write-Host "Reloading Objects" -ForegroundColor Yellow
    Load-CSOMObject -context $Srcctx -object ([REF]$term.Parent) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
    Load-CSOMObject -context $Srcctx -object ([REF]$term.SourceTerm) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
    Load-CSOMObject -context $Srcctx -object ([REF]$term.SourceTerm.Terms) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
    Load-CSOMObject -context $Srcctx -object ([REF]$term.SourceTerm.TermSet) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
    Load-CSOMObject -context $Srcctx -object ([REF]$term.SourceTerm.TermSet.Group) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false

    Write-Host "loaded objects: '$($term.Name)', '$($termset.Name)', '$($termgroup.Name)'" -ForegroundColor Green

    [Boolean]$isRoot = $term.IsRoot
    [Boolean]$isReused = $term.IsReused
    [Boolean]$isSourceTerm = $term.IsSourceTerm
    [Boolean]$isPinned = $term.IsPinned
    [Boolean]$isPinnedRoot = $term.IsPinnedRoot    
    Write-Host "Checking to see if the term is source and not reused, or not the source and resused/pinned" -ForegroundColor Yellow
    if($isRoot -and $isSourceTerm)
    {
        Write-Host "Term: '$($term.Name)' is a root term and is a source term" -ForegroundColor Yellow
        [Microsoft.SharePoint.Client.Taxonomy.Term]$NT = $termset.CreateTerm($term.Name,$lcid,$term.Id)
        Load-CSOMObject -context $Destctx -object ([REF]$NT) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
        $DestTermStore.CommitAll()
        Write-Host "Created Term: '$($NT.Name)'" -ForegroundColor Green
        return $NT
    }
    elseif(!$isRoot -and $isSourceTerm)
    {
        Write-Host "Term: '$($term.Name)' is not a root term but it is a source term so we must loop through all parent terms" -ForegroundColor Yellow
        # loop through all parent objects
        Load-CSOMObject -context $Srcctx -object ([REF]$term.Parent) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
        Write-Host "Getting parent Term: '$($term.Parent.Name)'" -ForegroundColor Yellow
        [Microsoft.SharePoint.Client.Taxonomy.Term]$pt = GetTerm -term $term.Parent -termset $termset
        
        Write-Host "Creating Term: '$($term.name)' under parent term: '$($pt.name)'" -ForegroundColor Yellow
        [Microsoft.SharePoint.Client.Taxonomy.Term]$nt = $pt.CreateTerm($term.Name,$lcid,$term.Id)
        Load-CSOMObject -context $Destctx -object ([REF]$nt) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
        
        $DestTermStore.CommitAll()
        return $NT
    }
    elseif(!$isSourceTerm -and !$isPinned) #This means it is reused but it is the root so we must reuse on the term set but we have to reuse from its source
    {
        Write-Host "Term is not a source term and it's not pinned. We must reuse this term" -ForegroundColor Yellow
        # Get DestGroup
        Write-Host "Getting the Term: '$($term.Name)' Source term termset group" -ForegroundColor Yellow
        [Microsoft.SharePoint.Client.Taxonomy.TermGroup]$grp = $term.SourceTerm.TermSet.Group
        Load-CSOMObject -context $Srcctx -object ([REF]$grp) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
        Write-Host "Getting Destination Term Group '$($grp.Name)'" -ForegroundColor Yellow
        [Microsoft.SharePoint.Client.Taxonomy.TermGroup]$tg = GetTermGroup -group $grp -termStore $termgroup.TermStore
        
        # Get Dest TermSet
        [Microsoft.SharePoint.Client.Taxonomy.TermSet]$trmset = $term.SourceTerm.TermSet
        Load-CSOMObject -context $Srcctx -object ([REF]$trmset) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
        Write-Host "Getting destination TermSet: '$($trmset.Name)'" -ForegroundColor Yellow
        [Microsoft.SharePoint.Client.Taxonomy.TermSet]$ts = GetTermSet -termset $trmset -group $tg

        # Get Source Term in Dest TermSet
        [Microsoft.SharePoint.Client.Taxonomy.Term]$strm = $term.SourceTerm
        Load-CSOMObject -context $Srcctx -object ([REF]$strm) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false

        Write-Host "Getting destination Term: '$($strm.Name)'" -ForegroundColor Yellow
        [Microsoft.SharePoint.Client.Taxonomy.Term]$st = GetTerm -term $term.SourceTerm -termset $ts
        if($isRoot)
        {
            Write-Host "Source term: '$($term.Name)' is a root term. Reusing Term off Termset: '$($termset.Name)' in Term Group: '$($termgroup.Name)'" -ForegroundColor Yellow
            [Microsoft.SharePoint.Client.Taxonomy.Term]$NewTerm = $termset.ReuseTerm($st, $false)
            Load-CSOMObject -context $Destctx -object ([REF]$NewTerm) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
            $DestTermStore.CommitAll()
            return $NewTerm
        }
        else
        {
            Write-Host "Term: '$($term.Name)' is not a root term" -ForegroundColor Yellow
            Write-Host "Getting Term: '$($term.Name)' parent term" -ForegroundColor Yellow
            [Microsoft.SharePoint.Client.Taxonomy.Term]$tp = $term.Parent
            Load-CSOMObject -context $Srcctx -object ([REF]$tp) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
            Write-Host "Getting Destination Term parent: '$($tp.Name)'" -ForegroundColor Yellow
            [Microsoft.SharePoint.Client.Taxonomy.Term]$Srcparent = GetTerm -term $tp -termset $termset

            Write-Host "Creating Resused term: '$($term.Name)' under parent term: '$($srcparent.Name)'" -ForegroundColor Yellow
            [Microsoft.SharePoint.Client.Taxonomy.Term]$newst = $Srcparent.ReuseTerm($st, $false)
            Load-CSOMObject -context $Destctx -object ([REF]$newst) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
            $DestTermStore.CommitAll()
            return $newst       
        }
    }
    elseif($isPinned -and $isPinnedRoot) # We must make sure the source term and all child terms are created before we can pin
    {
        Write-Host "Term: '$($term.Name)' is Pinned and is the pinned root" -ForegroundColor Yellow
        Write-Host "Getting the Pinned Terms source TermSet" -ForegroundColor Yellow
        [Microsoft.SharePoint.Client.Taxonomy.TermSet]$PinSourceTermSet = $term.PinSourceTermSet
        Load-CSOMObject -context $Srcctx -object ([REF]$PinSourceTermSet) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
        [Microsoft.SharePoint.Client.Taxonomy.TermGroup]$PinSourceGroup = $PinSourceTermSet.Group
        Load-CSOMObject -context $Srcctx -object ([REF]$PinSourceGroup) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false

        # Get Dest pinned Group
        Write-Host "Getting the Pinned Terms source TermSet TermGroup" -ForegroundColor Yellow
        [Microsoft.SharePoint.Client.Taxonomy.TermGroup]$tg = GetTermGroup -group $PinSourceGroup -termStore $termgroup.TermStore
        Load-CSOMObject -context $Destctx -object ([REF]$tg.TermSets) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
        [Microsoft.SharePoint.Client.Taxonomy.TermSetCollection]$tgts = $tg.TermSets
        Load-CSOMObject -context $Destctx -object ([REF]$tgts) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
        <#
        if(!$DestTermStore.GetGroup($PinSourceGroup.Id))
        {
            Write-Host "Destination Pinned Term Group '$($PinSourceGroup.Name)' already exists in the destination TermStore: LINE 223" -ForegroundColor Yellow
            [Microsoft.SharePoint.Client.Taxonomy.TermGroup]$tg = $DestTermStore.GetGroup($PinSourceGroup.Id)
            Load-CSOMObject -context $Destctx -object ([REF]$tg) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
            Load-CSOMObject -context $Destctx -object ([REF]$tg.TermSets) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
            [Microsoft.SharePoint.Client.Taxonomy.TermSetCollection]$tgts = $tg.TermSets
            Load-CSOMObject -context $Destctx -object ([REF]$tgts) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
        }
        else
        {
            Write-Host "Destination Pinned Term Group '$($PinSourceGroup.Name)' does not exist. Creating it now: LINE 215" -ForegroundColor Yellow
            [Microsoft.SharePoint.Client.Taxonomy.TermGroup]$tg = GetTermGroup -group $PinSourceGroup -termStore $termgroup.TermStore
            #Load-CSOMObject -context $Destctx -object ([REF]$tg) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
            #Load-CSOMObject -context $Destctx -object ([REF]$tg.TermSets) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
            #[Microsoft.SharePoint.Client.Taxonomy.TermSetCollection]$tgts = $tg.TermSets
            #Load-CSOMObject -context $Destctx -object ([REF]$tgts) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
        }
#>
        # Get Dest pinned TermSet
        if(!($tgts | ?{$_.Id -eq $PinSourceTermSet.Id}))
        {
            Write-Host "Destination Pinned TermSet: '$($PinSourceTermSet.Name)' does not exist. Creating it now" -ForegroundColor Yellow
            [Microsoft.SharePoint.Client.Taxonomy.TermSet]$ts = GetTermSet -termset $PinSourceTermSet -group $tg
        }
        else
        {
            Write-Host "Destination Pinned TermSet '$($PinSourceTermSet.Name)' already exists in the destination TermStore" -ForegroundColor Yellow
            [Microsoft.SharePoint.Client.Taxonomy.TermSet]$ts = $tg.TermSets | ?{$_.Id -eq $PinSourceTermSet.Id}
        }
        # Get Source Term in Dest TermSet
        Write-Host "Getting term: '$($term.Name)' Source Term: '$($term.SourceTerm.Name)' in destination termset: '$($ts.Name)'" -ForegroundColor Yellow
        [Microsoft.SharePoint.Client.Taxonomy.Term]$st = GetTerm -term $term.SourceTerm -termset $ts #Destination Term Returned

        if($term.SourceTerm.terms.count -gt 0)
        {
            Write-Host "Source Term: '$($term.SourceTerm.Name)' has '$($term.SourceTerm.terms.count)' child terms" -ForegroundColor Yellow
            foreach($trm in $term.SourceTerm.terms)
            {
                Write-Host "Walking Child Term '$($trm.Name):$($trm.Id)'" -ForegroundColor Yellow
                WalkSourceTerm -term $trm -termset $ts -termgroup $tg

            }
            if(!$isRoot)
            {
                Write-Host "Term: '$($term.Name)' is not a root term" -ForegroundColor Yellow
                Write-Host "Getting Term: '$($term.Name)' source term's parent term: LINE 263" -ForegroundColor Yellow
                [Microsoft.SharePoint.Client.Taxonomy.Term]$Srcparent = GetTerm -term $term.Parent -termset $termset

                Write-Host "Pinning Term: '$($term.Name)' on parent term: '$($Srcparent.Name)': LINE 267" -ForegroundColor Yellow
                [Microsoft.SharePoint.Client.Taxonomy.Term]$newst = $Srcparent.ReuseTermWithPinning($st)
                Load-CSOMObject -context $Destctx -object ([REF]$newst) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
                $newst.TermStore.CommitAll()
                return $newst     
            }
            else
            {
                Write-Host "Term: '$($term.Name)' is a root term." -ForegroundColor Yellow
                Write-Host "Pinning Term: '$($term.Name)' on termset: '$($termset.Name)': LINE 276" -ForegroundColor Yellow
                [Microsoft.SharePoint.Client.Taxonomy.Term]$NewTerm = $termset.ReuseTermWithPinning($st)
                Load-CSOMObject -context $Destctx -object ([REF]$NewTerm) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
                $NewTerm.TermStore.CommitAll()
                return $NewTerm
            }   
        }
        else
        {
            if(!$isRoot)
            {
                Write-Host "Term: '$($term.Name)' is not a root term." -ForegroundColor Yellow
                Write-Host "Getting Term: '$($term.Name)' source term's parent term: LINE 288" -ForegroundColor Yellow
                [Microsoft.SharePoint.Client.Taxonomy.Term]$Srcparent = GetTerm -term $term.Parent -termset $termset

                Write-Host "Pinning Term: '$($term.Name)' on parent term: '$($Srcparent.Name)'" -ForegroundColor Yellow
                [Microsoft.SharePoint.Client.Taxonomy.Term]$newst = $Srcparent.ReuseTermWithPinning($st)
                Load-CSOMObject -context $Destctx -object ([REF]$newst) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
                $DestTermStore.CommitAll()
                return $newst     
            }
            else
            {
                Write-Host "Term: '$($term.Name)' is a root term" -ForegroundColor Yellow
                Write-Host "Pinning Term: '$($term.Name)' on termset: '$($termset.Name)': LINE 301" -ForegroundColor Yellow
                [Microsoft.SharePoint.Client.Taxonomy.Term]$NewTerm = $termset.ReuseTermWithPinning($st)
                Load-CSOMObject -context $Destctx -object ([REF]$NewTerm) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
                $DestTermStore.CommitAll()
                return $NewTerm
            }   
 
        }
        elseif($isPinned -and !$isPinnedRoot) 
        {
            # This term is pinned but it's not the root of the pin we must skip this as we must pin term and all child terms
            Write-Host "Term: '$($term.name)' is pinned but it's not the pinned root term" -ForegroundColor Cyan
            write-Host "Getting Destination Term so we can Sync it" -ForegroundColor Yellow
            [Microsoft.SharePoint.Client.Taxonomy.Term]$t = GetTerm -term $term -termset $termset
            SyncTermInfo -destTerm $t -srcTerm $term
            return 
        }
    }
}

function GetTermGroup
{
    [CmdletBinding()]
    Param
    (
        [Parameter(Mandatory=$true)][Microsoft.SharePoint.Client.Taxonomy.TermStore]$termStore, #DestTermStore
        [Parameter(Mandatory=$true)][Microsoft.SharePoint.Client.Taxonomy.TermGroup]$group #SrcGroup
    )
    [boolean]$syncgroup = $false
    Write-Host "Reloading Term Group Objects" -ForegroundColor Yellow

    Load-CSOMObject -context $Destctx -object ([REF]$termStore.Groups) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
    if($termStore.groups.id.Guid.Contains($group.id.ToString()))
    {
        Write-Host "Term Group: '$($group.Name)' already exists in the destination term store." -ForegroundColor Yellow
        [Microsoft.SharePoint.Client.Taxonomy.TermGroup]$g = $termStore.groups | ?{$_.Id -eq $group.Id}
        Load-CSOMObject -context $Destctx -object ([REF]$g) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
    }
    else
    {
        Write-Host "Term Group: '$($group.Name)' does not exist in the destination term store." -ForegroundColor Yellow
        [Microsoft.SharePoint.Client.Taxonomy.TermGroup]$g = CreateTermGroup -termStore $termStore -group $group
        $syncgroup = $true
    }

    if($syncgroup)
    {
        Write-Host "Syncing Destination Term Group: '$($g.Name)' with Source Term Group '$($group.Name)'" -ForegroundColor Yellow
        SyncTermGroupInfo -destTermGroup $g -srcTermGroup $group
    }
    return $g
}

function CreateTermGroup
{
    [CmdletBinding()]
    Param
    (
        [Parameter(Mandatory=$false)][Microsoft.SharePoint.Client.Taxonomy.TermStore]$termStore, #DestTermStore
        [Parameter(Mandatory=$true)][Microsoft.SharePoint.Client.Taxonomy.TermGroup]$group #SrcGroup
    )

        Write-Host "Creating Term Group '$($group.Name)' in Destination TermStore" -ForegroundColor Yellow
        [Microsoft.SharePoint.Client.Taxonomy.TermGroup]$createdGroup = $termStore.CreateGroup($group.name, $group.id)
        Load-CSOMObject -context $DestCtx -object ([REF]$createdGroup) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
        $termStore.CommitAll()
        return $createdGroup
}

function GetTermSet
{
    [CmdletBinding()]
    Param
    (
        [Parameter(Mandatory=$true)][Microsoft.SharePoint.Client.Taxonomy.TermGroup]$group, #DestGroup
        [Parameter(Mandatory=$true)][Microsoft.SharePoint.Client.Taxonomy.TermSet]$termset #SrcTermSet
    )
        #Start-Sleep -Seconds 1
        [boolean]$SyncTermSet = $false

        Write-Host "Getting Group: '$($group.Name)' Termsets"
        Load-CSOMObject -context $DestCtx -object ([REF]$group.TermSets) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
        Write-Host "Checking for Termset: '$($termset.Name)' in Destination group '$($group.Name)' Termsets" -ForegroundColor Yellow
        #if($group.TermSets.Count -gt 0)
        if(($group.TermSets.Count -gt 0) -and ($group.TermSets.Name.Contains($termset.Name)))
        {
            #if($group.TermSets.Name.Contains($termset.Name))
            #{
                Write-Host "Termset: '$($termset.Name)' already exists in destination Term Group: '$($group.Name)'" -ForegroundColor Yellow
                [Microsoft.SharePoint.Client.Taxonomy.TermSet]$ts = $group.TermSets | ?{$_.Name -eq "$($termset.Name)"}
                Load-CSOMObject -context $DestCtx -object ([REF]$ts) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
            #}
            #else
            #{
                #Write-Host "Termset: '$($termset.Name)' does not exist in Destination Term Group: '$($group.Name)' so we will attempt to create it" -ForegroundColor Yellow
                #[Microsoft.SharePoint.Client.Taxonomy.TermSet]$ts = CreateTermSet -termset $termset -group $group
            #}
        }
        else
        {
            Write-Host "Termset: '$($termset.Name)' does not exist in Destination Term Group: '$($group.Name)' so we will attempt to create it" -ForegroundColor Yellow
            [Microsoft.SharePoint.Client.Taxonomy.TermSet]$ts = CreateTermSet -termset $termset -group $group
            $syncTermSet = $true
        }
        
        if($syncTermSet)
        {
            Write-Host "Syncing Destination Term Set: '$($ts.Name)' with Source Term Group '$($termset.Name)'" -ForegroundColor Yellow
            SyncTermSetInfo -destTermSet $ts -srcTermSet $termset
        }
        return $ts
}

function CreateTermSet
{
    [CmdletBinding()]
    Param
    (
        [Parameter(Mandatory=$true)]$termset, #SrcTermSet
        [Parameter(Mandatory=$true)]$group #DestGroup
    )
    Start-Sleep -Seconds 1

    Write-Host "Creating Termset: '$($termset.Name):$($termset.Id)' in destination term group: '$($group.Name)'" -ForegroundColor Yellow
    [Microsoft.SharePoint.Client.Taxonomy.TermSet]$tset = $group.CreateTermSet($termset.Name,$termset.Id,$lcid)
    Load-CSOMObject -context $DestCtx -object ([REF]$tset) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
    $destTermStore.CommitAll()
    return $tset
}

function Load-CSOMObject
{
    [CmdletBinding()]
    Param
    (
        [Parameter(Mandatory=$true)][Microsoft.SharePoint.Client.ClientRuntimeContext]$context,
        [Parameter(Mandatory=$true)][System.Object][REF]$object,        # We need to type as a generic Object since anything can be here. Found that you need to do it by Reference or else the type on the returned object may not match the passed-in type.
        [Parameter(Mandatory=$false)][int]$numRetries = 15,
        [Parameter(Mandatory=$false)][int]$numSecBetweenRetries = 5,
        [Parameter(Mandatory=$false)][Boolean]$throwExceptionOnError = $false
    )

    Write-Host "Loading object from SharePoint using CSOM..."
    $ErrorActionPreference = "SilentlyContinue"    # We will capture the error and report it ourselves.

    [int]$retries = 0
    [boolean]$success = $false
    [string]$errorMessage = $null
    do
    {
        if($retries -gt 0)
        {
            Write-Host "Retrying ($retries of $numRetries) after a $($numSecBetweenRetries*$retries) second pause..."
            Start-Sleep -s $($numSecBetweenRetries*$retries) 
        }
        
        try
        {
            Write-Host "`tLoading..."
            $context.Load($object)
            #$context.Load($object)
            

            Write-Host "`tExecuting..."
            $context.ExecuteQuery()

            if($retries -gt 0)
            {
                Write-Host "`tSuccess on retry $retries"
            }

            $success = $true
        }
        catch
        {
            # Capture the first error message for reporting later (if needed)
            if( [string]::IsNullOrEmpty($errorMessage) ) { $errorMessage = $_.Exception.Message }
            Write-Host "`t`tError loading object! Error: '$($_.Exception.Message)'" -ForegroundColor Red
            $retries++ 
        }
    } 
    while (!$success -and $retries -le $numRetries)      # Keep looping until we have success or have run out of retries
    
    if(!$success)
    {
        Write-Host "`tGenerating failure response" -ForegroundColor Red

        Write-Host "Error loading object! Error message: $errorMessage" -ForegroundColor Red

        if($throwExceptionOnError)
        {
            Write-Debug "`t`tThrowing terminating error"
            $errorMsg = "Unable to execute CSOM query on object of type $($object.GetType()) on client connection to ""$($context.Url)"". Error message: $errorMessage"
            throw $errorMsg
        }
    }

    Write-Host "Done loading object from SharePoint using CSOM. Success = $success"
}

function SyncTermInfo
{
    [CmdletBinding()]
    Param
    (
        [Parameter(Mandatory=$true)][Microsoft.SharePoint.Client.Taxonomy.Term]$destTerm,
        [Parameter(Mandatory=$true)][Microsoft.SharePoint.Client.Taxonomy.Term]$srcTerm
    )
    #Start-Sleep -Seconds 2
    #Load-CSOMObject -context $DestCtx -object ([REF]$destTerm.Labels) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
    #Load-CSOMObject -context $SrcCtx -object ([REF]$srcTerm.Labels) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false

    $ErrorActionPreference = "Continue"
    [Boolean]$needsUpdate = $false
	Write-Host "Checking to see if we need to load Source or Destination objects."  -ForegroundColor Yellow
    #region Sync properties regardless of term type. 
    # They can exist regardless of whether or not the term was re-used and/or Pinned
	Write-Host "Syncing term properties regardless of term type."
    # Add any local properties that are needed
    if($srcTerm.LocalCustomProperties.Count -gt 0)
    {
		if($srcTerm.LocalCustomProperties.Key.Count -gt 0)
		{
			Write-Host "Processing local custom properties for ""$($srcTerm.Name)""" -forground yellow
			foreach($srcProperty in $srcTerm.LocalCustomProperties.Keys)
			{
				if($destTerm.LocalCustomProperties[$srcProperty] -ne $srcTerm.LocalCustomProperties[$srcProperty])
				{
					Write-Host "Updating the Local Custom Property ""$srcProperty"" for ""$($destTerm.Name)"""
					$destTerm.SetLocalCustomProperty($srcProperty, $srcTerm.LocalCustomProperties[$srcProperty])
					$needsUpdate = $true       
				}
			}
		}
    }

    if($destTerm.IsAvailableForTagging -ne $srcTerm.IsAvailableForTagging) 
    { 
        Write-Host "Found discrepancy in Is Available For Tagging. Updating it." -ForegroundColor Yellow
        $destTerm.IsAvailableForTagging = $srcTerm.IsAvailableForTagging 
		$needsUpdate = $true       
    }

    # Deprecate the term if needed
    if($destTerm.IsDeprecated -ne $srcTerm.IsDeprecated)
    {
        Write-Host "Found discrepancy in Is Deprecated. Updating it." -ForegroundColor Yellow
        $destTerm.Deprecate($srcTerm.IsDeprecated)
        $needsUpdate = $true       
    }
    
    if($needsUpdate)
    {
        Write-Host "Done processing term ""$($srcTerm.Name)"". Committing all changes." -ForegroundColor Yellow
        $DestTermStore.CommitAll()
    }
	#endregion

	#region Sync Term properties per term type
	Write-Host "Syncing term properties per term type." -ForegroundColor Yellow
	# Source Terms
	if($srcTerm.IsSourceTerm -and ($srcTerm.IsReused -or !($srcTerm.IsReused)))
	{
		<#
        if($destTerm.Owner -ne $srcTerm.Owner)
		{
			
			Write-Host "Found discrepancy in the Owner. Updating it." -ForegroundColor Yellow
			$srcOwner = $srcTerm.Owner
			$prefix = $srcOwner.Replace("w","f")
			$membership = $prefix.Replace("campperson\","membership|")
			$newOwner = $membership + $UPN
			$destTerm.Owner = $newOwner
			$needsUpdate = $true
		}
        #>
        
		if($destTerm.Description -ne $srcTerm.Description) 
		{ 
			Write-Host "Found discrepancy in the Description. Updating it." -ForegroundColor Yellow
			$destTerm.SetDescription($srcTerm.Description, $lcid) 
			$needsUpdate = $true       
		}

        Load-CSOMObject -context $DestCtx -object ([REF]$destTerm.Labels) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
        Load-CSOMObject -context $SrcCtx -object ([REF]$srcTerm.Labels) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$false
		if($destTerm.Labels.AreItemsAvailable -and $srcTerm.Labels.AreItemsAvailable)
		{
			# Add any labels needed and, if it already exists, set the default label appropriately
			foreach($srcLabel in $srcTerm.Labels)
			{
				[Microsoft.SharePoint.Client.Taxonomy.Label]$destLabel = $destTerm.Labels | Where-object {$_.Value -eq $srcLabel.Value -and $_.Language -eq $srcLabel.Language}
				if($destLabel -eq $null)
				{
                    Write-Host "Adding the Label ""$($srcLabel.Value)""" -ForegroundColor Yellow
					$destTerm.CreateLabel($srcLabel.Value, $srcLabel.Language, $srcLabel.IsDefaultForLanguage) | Out-Null
					$needsUpdate = $true       
				}
				else
				{
					if($srcLabel.IsDefaultForLanguage -ne $destLabel.IsDefaultForLanguage)
					{
						Write-Host "Updating the Default Label" -ForegroundColor Yellow
						$destLabel.IsDefaultForLanguage = $srcLabel.IsDefaultForLanguage
						$needsUpdate = $true       
					}
				}
			}   
		}                
		else
		{
			Write-Host "Source or destination term labels do not exist or have not yet been initialized" -ForegroundColor Yellow
		}

		 # Sync custom properties
		if($srcTerm.CustomProperties.Count -gt 0)
		{
            Write-Host "Processing custom properties for ""$($srcTerm.Name)""" -ForegroundColor Yellow
			foreach($srcProperty in $srcTerm.CustomProperties.Keys)
			{
				if($destTerm.CustomProperties[$srcProperty] -ne $srcTerm.CustomProperties[$srcProperty])
				{
                    Write-Host "Updating the Custom Property ""$srcProperty""" -ForegroundColor Yellow
					$destTerm.SetCustomProperty($srcProperty, $srcTerm.CustomProperties[$srcProperty])
					$needsUpdate = $true       
				}
			}
		}

		if($destTerm.CustomSortOrder -ne $srcTerm.CustomSortOrder) 
        { 
            Write-Host "Found discrepancy in the Custom Sort Order. Updating it." -ForegroundColor Yellow
            $destTerm.CustomSortOrder = $srcTerm.CustomSortOrder 
            $needsUpdate = $true       
        }
	}

	# Reused Terms that aren't source terms and pinned terms that are the pinned root
	if(($srcTerm.IsReused -and !($srcTerm.IsSourceTerm)) -or ($srcTerm.IsPinned -and $srcTerm.IsPinnedRoot))
	{
		if($destTerm.CustomSortOrder -ne $srcTerm.CustomSortOrder) 
        { 
            Write-Host "Found discrepancy in the Custom Sort Order. Updating it." -ForegroundColor Yellow
            $destTerm.CustomSortOrder = $srcTerm.CustomSortOrder 
            $needsUpdate = $true       
        }
	}

	if($needsUpdate)
    {
        Write-Host "Done processing term ""$($srcTerm.Name)"" properties. Committing all changes." -ForegroundColor Yellow
        $DestTermStore.CommitAll()
    }
	#endregion
    Write-Host "Done syncing term info." -ForegroundColor Green
}

function SyncTermSetInfo
{
	[CmdletBinding()]
    Param
    (
        [Parameter(Mandatory=$true)][Microsoft.SharePoint.Client.Taxonomy.TermSet]$destTermSet,
        [Parameter(Mandatory=$true)][Microsoft.SharePoint.Client.Taxonomy.TermSet]$srcTermSet
    )
    #Start-Sleep -Seconds 3

	[Boolean]$needsUpdate = $false 

    <#
	#Set the contact and Stake Holders
    Write-Host "Adding Termset Contact and Stakeholders if they exist"

	if($destTermSet.Contact -ne $srcTermSet.Contact)
	{
		Write-Host "Found discrepency in TermSet Contact. Updating object to: ""$($srcTermSet.Contact)""." -ForegroundColor Yellow
		$destTermSet.Contact = $srcTermSet.Contact
		$needsUpdate = $true
	}

    if($destTermSet.Owner -ne $srcTermSet.Owner)
	{
        $srcOwner = $srcTermSet.Owner
        $prefix = $srcOwner.Replace("w","f")
        $membership = $prefix.Replace("campperson\","membership|")
        $newOwner = $membership + $UPN
		Write-Host "Found discrepency in TermSet Owner. Updating object owner to: ""$($newOwner)""." -ForegroundColor Yellow
		$destTermSet.Owner = $newOwner
		$needsUpdate = $true
	}

	if($srcTermSet.Stakeholders.count -gt 0)
	{
		if($destTermSet.Stakeholders -ne $srcTermSet.Stakeholders)
		{
			$Stakeholdersarray = @()
			$Stakeholdersarray += $srcTermSet.Stakeholders
			foreach($item in $Stakeholdersarray)
			{
				$prefix = $item.Replace("w","f")
				$membership = $prefix.Replace("campperson\","membership|")
				$newStakeHolder = $membership + $UPN
				$DestTermSet.AddStakeholder($newStakeHolder) 
				$needsUpdate = $true
			}
		}
	}
    #>

    if($destTermSet.CustomSortOrder -ne $srcTermSet.CustomSortOrder)
    {
        Write-Host "Found discrepancy in the Custom Sort Order. Will update." -ForegroundColor Yellow
        $destTermSet.CustomSortOrder = $srcTermSet.CustomSortOrder
        $needsUpdate = $true
    }
    
    if($destTermSet.Description -ne $srcTermSet.Description)
    {
        Write-Host "Found discrepancy in the Description. Will update." -ForegroundColor Yellow
        $destTermSet.Description = $srcTermSet.Description
        $needsUpdate = $true
    }

    if($destTermSet.IsAvailableForTagging -ne $srcTermSet.IsAvailableForTagging)
    {
        Write-Host "Found discrepancy in Available for Tagging. Will update."  -ForegroundColor Yellow
        $destTermSet.IsAvailableForTagging = $srcTermSet.IsAvailableForTagging
        $needsUpdate = $true
    }
    
    if($destTermSet.IsOpenForTermCreation -ne $srcTermSet.IsOpenForTermCreation)
    {
        Write-Host "Found discrepancy in the Submission Policy. Will update."  -ForegroundColor Yellow
        $destTermSet.IsOpenForTermCreation = $srcTermSet.IsOpenForTermCreation
        $needsUpdate = $true
    }

    # Sync custom properties
    if($srcTermSet.CustomProperties.Count -gt 0)
    {
        Write-Host "Examining Custom Properties on ""$($srcTermSet.Name)""" -ForegroundColor Yellow
        foreach($srcProperty in $srcTermSet.CustomProperties.Keys)
        {
            if($destTermSet.CustomProperties[$srcProperty] -ne $srcTermSet.CustomProperties[$srcProperty])
            {
                Write-Host "Found discrepancy in Custom Property ""$($srcProperty)"". Will update." -ForegroundColor Yellow
                $destTermSet.SetCustomProperty($srcProperty, $srcTermSet.CustomProperties[$srcProperty])
                $needsUpdate = $true
            }
        }
    }
	# Write all the changes to this point
    if($needsUpdate)
    {
        Write-Host "Updating the term set ""$($srcTermSet.Name)"" and committing all changes" -ForegroundColor Yellow
        $destCtx.ExecuteQuery()
        $DestTermStore.CommitAll()
        Write-Host "Done!" -ForegroundColor Green
    }
    else
    {
        Write-Host "No property updates needed for the term set ""$($srcTermSet.Name)"""  -ForegroundColor Green
    }
}

function SyncTermGroupInfo
{
	[CmdletBinding()]
    Param
    (
        [Parameter(Mandatory=$true)][Microsoft.SharePoint.Client.Taxonomy.TermGroup]$destTermGroup,
        [Parameter(Mandatory=$true)][Microsoft.SharePoint.Client.Taxonomy.TermGroup]$srcTermGroup
    )
    #Start-Sleep 1

	[Boolean]$needsUpdate = $false

    # Synchronize term group properties
    if($srcTermGroup.Description -ne $destTermGroup.Description)
    {
        Write-Host "Found term group description discrepancy. Updating." -ForegroundColor Yellow
        $destTermGroup.Description = $srcTermGroup.Description
        $needsUpdate = $true
    }

	<#if($srcTermGroup.ContributorPrincipalNames.count -gt 0)
	{
		if($destTermGroup.ContributorPrincipalNames -ne $srcTermGroup.ContributorPrincipalNames)
		{
			Write-Host "Found term group Contributor discrepancy. Updating."
			$PrincipalNamesarray = @()
			$PrincipalNamesarray  += $srcTermGroup.ContributorPrincipalNames
			foreach($item in $PrincipalNamesarray)
			{
				$prefix = $item.Replace("w","f")
				$membership = $prefix.Replace("teckcominco\","membership|")
				$newContributor = $membership + $UPN
				$destTermGroup.AddContributor($newContributor) 
				$needsUpdate = $true  
			}
			$needsUpdate = $true
		}	
	}

	if($srcTermGroup.GroupManagerPrincipalNames.count -gt 0)
	{
		if($destTermGroup.GroupManagerPrincipalNames -ne $srcTermGroup.GroupManagerPrincipalNames)
		{
			Write-Host "Found term group description discrepancy. Updating."
			$GroupManagerArray = @()
			$GroupManagerArray += $srcTermGroup.GroupManagerPrincipalNames
			foreach($item in $PrincipalNamesarray)
			{
				$prefix = $item.Replace("w","f")
				$membership = $prefix.Replace("teckcominco\","membership|")
				$newManager = $membership + $UPN 
				$destTermGroup.AddGroupManager($newManager)
				$needsUpdate = $true  
			}
			$needsUpdate = $true
		}	
	}
	#>

	if($needsUpdate)
    {
        Write-Host "Updating the term Group ""$($srcTermGroup.Name)"" and committing all changes" -ForegroundColor Yellow
        $destCtx.ExecuteQuery()
        $destTermstore.CommitAll()
        Write-Host "Done!" -ForegroundColor Green
    }
    else
    {
        Write-Host "No property updates needed for the term group ""$($srcTermGroup.Name)""" -ForegroundColor Green
    }
}

#endregion

#region main
[Int32]$lcid = (Get-Culture).LCID

# Get the source term store
Write-Host "Getting the source term stores" -ForegroundColor Yellow

$SrcCtx = New-Object Microsoft.SharePoint.Client.ClientContext($SrcSiteUrl)
$SrcSecurePassword = ConvertTo-SecureString –String $SrcPassword –AsPlainText –force
$SrcCredentials = [System.Management.Automation.PSCredential]::new($SrcUsername,$SrcSecurePassword)
$SrcCtx.Credentials = $SrcCredentials
$srcTaxonomySession = [Microsoft.SharePoint.Client.Taxonomy.TaxonomySession]::GetTaxonomySession($srcCtx)
Load-CSOMObject -context $SrcCtx -object ([REF]$SrcTaxonomySession) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$true
[Microsoft.SharePoint.Client.Taxonomy.TermStoreCollection]$srcTermStores = $SrcTaxonomySession.TermStores
Load-CSOMObject -context $SrcCtx -object ([REF]$srcTermStores) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$true
[Microsoft.SharePoint.Client.Taxonomy.TermStore]$srcTermStore = $srcTermStores[0]
Load-CSOMObject -context $SrcCtx -object ([REF]$srcTermStore) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$true
Write-Host "Retrieved Source Term Store: '$($srcTermStore.Name)'" -ForegroundColor Yellow

# Get Destination Term Store
Write-Host "Getting the Destination term stores" -ForegroundColor Yellow

$DestSecurePwd = ConvertTo-SecureString $SPOPassword -AsPlainText -Force
$DestCtx = New-Object Microsoft.SharePoint.Client.ClientContext($SPOSiteUrl)
$DestCredentials = New-Object Microsoft.SharePoint.Client.SharePointOnlineCredentials($SPOUsername, $DestSecurePwd)
$DestCtx.Credentials = $DestCredentials
$DestTaxonomySession = [Microsoft.SharePoint.Client.Taxonomy.TaxonomySession]::GetTaxonomySession($DestCtx)
Load-CSOMObject -context $DestCtx -object ([REF]$DestTaxonomySession) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$true
Load-CSOMObject -context $DestCtx -object ([REF]$DestTaxonomySession.TermStores) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$true
[Microsoft.SharePoint.Client.Taxonomy.TermStore]$DestTermStore = $DestTaxonomySession.TermStores[0]
Load-CSOMObject -context $DestCtx -object ([REF]$DestTaxonomySession.TermStores[0]) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$true
Write-Host "Retrieved Destination Term Store: '$($DestTermStore.Name)'" -ForegroundColor Yellow

# Get Source Term Groups
Write-Host "Getting the Source Term Groups" -ForegroundColor Yellow
[Microsoft.SharePoint.Client.Taxonomy.TermGroupCollection]$SrcGroups = $SrcTermStore.Groups
Load-CSOMObject -context $SrcCtx -object ([REF]$SrcGroups) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$true

foreach($SrcGroup in $SrcGroups)
{
    if(($SrcGroup.Name -ne "People") -and ($SrcGroup.Name -ne "Search Dictionaries") -and ($SrcGroup.Name -ne "System"))
    {
        Write-Host "Getting the Source Term Group: '$($SrcGroup.Name)' TermSets" -ForegroundColor Yellow
        Load-CSOMObject -context $SrcCtx -object ([REF]$SrcGroup) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$true
        Load-CSOMObject -context $SrcCtx -object ([REF]$srcGroup.TermSets) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$true
        [Microsoft.SharePoint.Client.Taxonomy.TermSetCollection]$SrcTermSets = $srcGroup.TermSets

        Write-Host "Getting Destination Term Group: '$($SrcGroup.Name)'" -ForegroundColor Yellow
        [Microsoft.SharePoint.Client.Taxonomy.TermGroup]$DestGroup = GetTermGroup -termStore $DestTermStore -group $SrcGroup

        Write-Host "Looping through all termsets in Source Group: '$($SrcGroup.Name)'" -ForegroundColor Yellow
        foreach($SrcTermSet in $SrcTermSets)
        {
            Write-Host "Getting Source Termset: '$($SrcTermSet.Name)'" -ForegroundColor Yellow
            Load-CSOMObject -context $SrcCtx -object ([REF]$SrcTermSet) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$true

            Write-Host "Getting Destination Termset: '$($SrcTermSet.Name)'" -ForegroundColor Yellow
            [Microsoft.SharePoint.Client.Taxonomy.TermSet]$DestTermSet = GetTermSet -group $DestGroup -termset $SrcTermset

            Write-Host "Getting Source Termset: '$($SrcTermSet.Name)' Terms" -ForegroundColor Yellow
            [Microsoft.SharePoint.Client.Taxonomy.TermCollection]$SrcTerms = $SrcTermSet.Terms
            Load-CSOMObject -context $SrcCtx -object ([REF]$SrcTerms) -numSecBetweenRetries 5 -numRetries 5 -throwExceptionOnError:$true
            Write-Host "Looping through all terms in TermSet: '$($SrcTermSet.Name)'" -ForegroundColor Yellow
            foreach($SrcTerm in $SrcTerms)
            {
                Write-Host "Walking Term: '$($SrcTerm.Name)' and all child terms" -ForegroundColor Yellow
                WalkSourceTerm -term $SrcTerm -termset $DestTermSet -termgroup $DestGroup    
            }    
        }
    }
}
Write-Host "Done Migrating Term Store!!!" -ForegroundColor Green
#endregion